/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.01.2023 19:01:03

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2096;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.036527961492538452, } };
const TfArray<1, int> quant0_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ 22,43,-101,-14,99,-65,-6,10,66,-66,28,43,-27, 127,27,-90,-55,19,-31,-79,-66,56,-13,38,19,6, -16,87,-39,-91,-32,2,18,-68,72,35,-39,-15,20, 
  /* [1][0][][] */ -18,-33,83,62,-52,-16,5,-85,70,-38,23,-88,53, 5,-97,127,36,-38,-14,-2,-53,110,-17,-29,-4,16, -10,-82,62,107,-89,-114,-3,-56,55,15,54,-46,51, 
  /* [2][0][][] */ -73,-78,-66,127,-60,-111,-77,104,-97,50,62,26,11, -11,-43,-108,84,19,-49,62,1,-49,-47,11,-2,-22, -11,-78,-54,60,-59,-5,20,9,-83,60,-55,-4,-8, 
  /* [3][0][][] */ -127,71,52,90,120,-37,-21,52,-49,-29,-35,3,45, 46,66,-73,-5,-97,-92,-48,-23,18,55,-38,80,3, -73,-19,-100,94,46,43,-13,-39,-46,44,-9,-10,-36, 
  /* [4][0][][] */ 92,90,-21,30,-18,-41,12,-31,-105,74,-50,20,38, 127,63,-6,47,-126,16,-27,-13,-87,72,-114,14,31, 70,39,95,-24,-68,-39,42,-44,-88,39,-11,43,-5, 
  /* [5][0][][] */ 106,-26,50,47,-50,-5,-59,-39,14,-55,-82,5,67, -7,-64,18,74,-10,15,-8,-41,23,61,-32,37,-54, 120,-65,-18,42,18,22,-127,1,-33,85,-18,40,-16, 
  /* [6][0][][] */ -93,-55,-105,-53,-95,-47,77,7,-19,61,-26,-24,54, -41,127,47,40,21,22,-17,-15,1,-38,18,7,-20, -112,34,42,-25,-95,-61,51,39,-28,30,10,-15,-9, 
  /* [7][0][][] */ -39,-78,-17,49,75,-93,-78,36,-71,-5,-86,-5,-46, 98,-37,-15,-69,96,59,-47,89,-100,21,59,34,-26, -58,-127,24,85,-26,-81,-72,-23,-81,-57,28,-7,30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0040293615311384201, 0.0034964259248226881, 0.0033218446187674999, 0.0036279929336160421, 0.0038503180257976055, 0.0032970556057989597, 0.0042261518537998199, 0.0029295950662344694, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 66, -1935, -308, -456, -1619, -1262, -647, -1189, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00014718435704708099, 0.00012771731417160481, 0.00012134021380916238, 0.00013252318603917956, 0.00014064427523408085, 0.00012043472088407725, 0.00015437271213158965, 0.00010701213614083827, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -45,-75,-34,100,-24,-98,127,-45, -11,-43,-33,9,-35,-94,90,-47, 5,-53,15,62,-3,24,93,-11, 
  /* [1][0][][] */ -12,102,-127,-99,-41,-35,65,-3, -51,-28,-47,44,-62,31,-35,7, 78,102,19,85,48,14,-27,3, 
  /* [2][0][][] */ -68,85,-100,-58,27,76,-105,-57, 4,44,-64,15,-10,-19,-127,42, -65,6,-54,-104,11,84,-17,22, 
  /* [3][0][][] */ -61,-27,12,-18,-74,76,16,70, -20,-15,21,127,13,112,47,32, -6,-72,58,-19,-74,96,73,0, 
  /* [4][0][][] */ -17,17,65,36,45,-68,-33,44, -20,-32,46,10,-26,-67,3,87, 50,-106,92,127,-22,59,-84,67, 
  /* [5][0][][] */ 1,4,-62,19,127,91,-12,2, -32,-27,-121,-13,56,59,-55,-98, -35,22,9,-55,78,-12,-48,9, 
  /* [6][0][][] */ 44,-46,7,3,50,-30,-41,6, 26,-15,22,-81,47,-7,-26,-116, -79,31,-30,-70,127,-62,0,-70, 
  /* [7][0][][] */ -32,-58,31,10,11,127,78,-5, 75,-80,-50,41,34,36,76,-13, -44,-91,-49,47,-3,78,-38,38, 
  /* [8][0][][] */ -62,-87,24,13,-1,-56,-37,72, -41,-74,-40,100,127,57,28,49, -14,-99,18,-18,58,-27,80,10, 
  /* [9][0][][] */ -63,-55,51,-28,72,-18,-48,-18, -85,53,127,-50,35,-15,14,-48, -105,-29,75,-20,79,-38,3,-14, 
  /* [10][0][][] */ 32,37,-16,-45,-30,-56,-70,-20, 127,8,-20,50,46,14,101,-104, -20,2,-23,-62,-64,-22,87,-50, 
  /* [11][0][][] */ -58,-7,-33,47,-62,-81,105,44, -83,117,81,-43,-127,-1,34,72, -47,-4,-75,46,117,-69,114,-11, 
  /* [12][0][][] */ 42,13,-127,-77,30,38,-22,-120, -7,11,8,-27,83,-35,-4,-29, 14,53,-74,-38,14,13,-33,-2, 
  /* [13][0][][] */ 60,-2,-72,-11,-14,-57,-39,-63, 8,-127,-30,-53,72,-73,-91,-51, 51,-123,-98,17,28,-30,-4,-74, 
  /* [14][0][][] */ -58,68,16,-3,-72,73,-20,-83, -67,85,-57,-41,55,50,-22,-47, -94,127,54,-67,-34,62,-18,30, 
  /* [15][0][][] */ 112,49,-23,66,-127,-14,-108,-17, 28,5,34,-89,-34,54,7,4, 127,-55,52,-117,-55,24,-95,31, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0037143037188798189, 0.0029654246754944324, 0.0040091918781399727, 0.0026979930698871613, 0.003110293997451663, 0.0038175878580659628, 0.0032802328933030367, 0.0038633258081972599, 0.0033131900709122419, 0.0038059323560446501, 0.0030954754911363125, 0.00249646813608706, 0.0045406576246023178, 0.0042920359410345554, 0.0034213622566312551, 0.0031601854134351015, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -481, -1065, -739, -1170, -730, 180, -1227, 117, -96, -1416, -7, -2023, -519, 2106, -1315, -8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00011374030145816505, 9.0807945525739342e-05, 0.00012277043424546719, 8.2618593296501786e-05, 9.5244169642683119e-05, 0.00011690309474943206, 0.00010044808004749939, 0.00011830368748633191, 0.00010145729902433231, 0.00011654617264866829, 9.4790397270116955e-05, 7.6447446190286428e-05, 0.0001390451070619747, 0.00013143174874130636, 0.0001047697733156383, 9.6771953394636512e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[5*208] = { 
  -32, -12, 9, -3, -28, 46, -17, -30, -8, -60, -53, -16, -25, -68, -41, -38, -44, 35, -5, 10, 37, -45, -38, -25, -22, -42, -94, -64, -18, -96, 18, -25, -69, -12, -84, -10, -32, -4, 37, -16, -36, -15, -15, -31, -47, -127, 23, -23, -53, 42, -13, -46, -17, -31, 38, -65, -25, -46, -9, 21, -28, -46, 42, -10, -32, 42, 1, -49, -67, 12, 5, -15, -59, -26, 66, 10, 67, -10, 27, -21, 9, 55, 6, -15, -45, -3, 10, -22, -59, -14, 6, 36, 35, -37, -2, -1, -57, 79, 15, 13, -48, 31, 23, 24, -62, 25, 16, 21, 59, -60, 23, -34, -82, 14, 59, 7, -10, 21, 6, 9, 26, 79, 8, 1, 57, -20, 69, -56, -47, 10, 14, -19, 9, 56, -3, -41, -17, 10, -18, 18, 35, 52, -5, 6, 5, 0, 26, -29, 34, -11, -38, 2, 24, 14, 20, -19, 1, 51, -43, 4, 55, -7, -17, 3, 31, -71, -24, 32, 6, -44, -28, -43, -58, -16, -114, -17, 50, -15, -102, 12, 14, 14, -25, 21, 41, -7, 0, -15, -23, -38, -98, 0, -15, -44, 13, 36, -2, -2, -4, -46, 33, -37, -63, 22, -42, -116, -13, 21, 
  -25, -11, 8, 11, -1, -18, -18, -27, -44, 30, 23, 51, 14, 61, 51, 45, -34, 39, 31, -8, -2, 17, 22, -1, -59, 21, 9, 1, 53, 15, 19, 6, -18, 22, 26, -10, 24, 9, -17, 8, -23, 9, -28, -20, 59, 46, 4, 34, -4, 11, 11, 3, 23, 3, 28, 16, -4, 10, 22, -5, 30, 6, 23, 33, -30, 0, 1, -16, 36, 27, 33, 7, -39, -11, 17, -32, -19, 8, -3, 23, -22, -10, -70, -29, 18, -1, 9, -5, 7, -20, 28, -31, 12, 112, -63, 65, -31, -32, -62, -81, -21, -14, 8, 0, 8, -41, 18, -33, 0, 71, -69, 36, 3, -13, -78, -28, 1, -31, 27, 21, -8, 15, -4, -4, 37, 33, -22, -48, -20, -27, 1, -22, -9, 33, 16, -14, 14, 38, 4, -11, -10, 57, -6, -37, -34, 18, -23, 24, -10, 8, 49, -9, 3, 54, -36, 34, 4, 21, 52, -51, 13, 14, -104, 33, 3, 44, -7, -12, 46, 78, 1, 36, 20, 23, 47, -47, -60, -42, -54, 7, -1, 35, 44, 7, 34, 55, -22, -9, 17, -2, -4, -18, -101, -31, -104, -2, -15, 6, 40, 5, 21, 28, 29, 59, 76, 63, -21, 22, 
  -5, 15, 55, 9, 5, 20, -1, 93, 32, -33, 59, -47, 63, -3, -8, 34, 19, 14, -2, 12, 6, -3, 16, 59, -14, -28, 26, -27, 8, -83, -22, -6, 21, 4, -6, -12, -22, -28, 2, 49, 0, -18, 25, -5, -40, -55, -43, 1, 21, 33, -53, -7, 25, -21, -17, 22, 15, -27, -2, 19, -31, 40, -17, 12, 32, 28, -28, -5, 29, -25, -45, 5, -5, -13, -12, 13, -56, -44, -6, 12, 46, -3, -12, 65, 33, -64, -82, 0, 23, -31, 56, 74, -83, -50, 8, 51, 35, 23, -59, 44, 32, 1, 21, 57, 66, -14, -41, 38, -34, -38, -55, 17, 35, -36, -45, 17, 38, -32, -32, 43, 3, 15, -27, 2, -45, -73, -27, -59, 74, 0, -56, 2, -3, -13, -43, 5, 45, -1, 3, 22, -36, -28, -29, -24, 67, 23, 28, 34, 1, -8, 7, -3, -6, 11, 42, 37, -39, -65, 33, 15, 59, 48, 52, 17, -3, 31, -22, 53, 12, 7, 27, 35, -15, -44, 16, 2, 16, 5, 45, 9, -29, 50, 2, 49, 21, -6, 46, 13, 10, -57, 5, -32, 114, -8, 43, -20, -68, 39, -13, 63, -22, -72, 14, -35, -15, -13, 22, 28, 
  -1, 12, -28, 8, 22, -28, 24, -59, 6, -19, 12, 40, 2, -88, -37, -21, 40, -28, -19, -10, 23, -20, 37, 15, 11, 33, 0, -5, 8, -19, -58, -52, 20, -72, 39, -31, -28, 62, 15, 40, 41, 28, 8, 0, 39, -17, -15, -69, 33, -40, 26, -16, 5, 44, 38, 33, 36, 14, -5, 29, 10, -17, 3, -75, 44, -21, 32, -26, -17, 38, 4, 10, 16, 10, 2, 12, -2, 17, 16, -50, -10, 3, 53, 0, -14, 20, -11, -20, 20, 52, -27, 33, 11, -27, 27, -62, 4, 12, 38, 63, -14, 18, 11, 25, 14, 5, -45, -31, 26, -84, 28, 0, -52, 21, 48, 16, -20, -25, -22, -1, -68, -32, 19, -38, 14, 11, 68, 38, 21, 25, 21, 1, -39, -25, 32, 29, -28, -17, 25, -28, -9, 55, 9, 21, -37, -43, 30, -38, -60, 6, 0, -18, -68, -50, 24, -23, 19, 54, 42, 50, -7, 12, 16, -50, -56, -32, -10, -79, -75, -31, 12, -13, -15, -2, 0, 82, -1, -15, -46, -45, -39, -48, 2, -29, 4, -9, 18, -5, 10, 17, -13, 23, -17, 8, -22, -2, -3, -64, -22, -56, -11, 9, -41, 47, -39, -5, -26, 2, 
  -35, -2, -7, -15, -22, -48, -10, -12, -34, -21, -45, -12, 5, -28, -31, -52, -15, -39, -20, 24, 15, -31, -60, -57, -19, 1, -44, -3, -31, -104, 45, -14, -13, -27, -48, -25, -67, -22, -5, -32, 24, 24, 10, -24, 1, -57, -18, 10, 12, 14, 25, -2, 40, -51, -46, 42, -8, -7, 23, -38, -20, 50, -39, -8, -16, 32, -92, -70, -61, 31, 43, 11, 6, -58, 26, 4, -27, -9, 22, 22, -55, 54, 45, -11, -58, 24, 8, -38, -26, 26, -17, 49, 38, -31, 10, -3, -30, 10, -15, 18, 9, 27, -30, 13, 37, 12, -53, -16, 48, 19, 23, -15, 15, -33, -18, -44, -36, -9, 45, 1, -37, -74, 5, -26, -29, 45, -20, 33, -23, -13, -4, -35, -37, -10, -13, 28, -19, -48, 43, -48, 18, -44, -64, 22, 1, 6, 18, 2, 45, -13, -55, 33, 35, -29, -33, 25, 2, -63, 13, 32, -4, -68, -38, 12, 38, 23, -4, -28, -14, -33, -48, 15, 2, -74, -30, -12, -35, -29, -22, 9, -51, -60, -56, -71, -9, 20, 11, 9, 12, -113, 6, -8, 39, -33, -43, -25, 23, -21, -40, -60, -57, -23, -32, -14, 14, -111, -8, 6, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 5,208 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0042358562350273132, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[5] = { 167, 30, 200, -208, -243, };
const TfArray<1, int> tensor_dimension11 = { 1, { 5 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00010324612230760977, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.036527961492538452, } };
const TfArray<1, int> quant12_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.030622240155935287, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.030622240155935287, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.030622240155935287, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.030622240155935287, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.024374321103096008, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.024374321103096008, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.024374321103096008, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.024374321103096008, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.082446873188018799, } };
const TfArray<1, int> quant21_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
